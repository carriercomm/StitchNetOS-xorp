# Copyright (c) 2009-2011 XORP, Inc and Others
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, Version 2, June
# 1991 as published by the Free Software Foundation. Redistribution
# and/or modification of this program under the terms of any other
# version of the GNU General Public License is not permitted.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. For more details,
# see the GNU General Public License, Version 2, a copy of which can be
# found in the XORP LICENSE.gpl file.
#
# XORP Inc, 2953 Bunker Hill Lane, Suite 204, Santa Clara, CA 95054, USA;
# http://xorp.net

# $XORP$

import os
Import('env')

env = env.Clone()

is_shared = env.has_key('SHAREDLIBS')

env.AppendUnique(CPPPATH = [
    '#',
    '$BUILDDIR',
    ])

env.PrependUnique(LIBPATH = [
    '$BUILDDIR/libxorp',
    '$BUILDDIR/libcomm',
    '$BUILDDIR/libxipc',
    '$BUILDDIR/libproto',
    '$BUILDDIR/libfeaclient',
    '$BUILDDIR/policy/backend',
    '$BUILDDIR/policy/common',
    '$BUILDDIR/xrl/interfaces',
    '$BUILDDIR/xrl/targets',
    '$BUILDDIR/mrt',
    '$BUILDDIR/cli/libtecla',
    '$BUILDDIR/cli',
    '$BUILDDIR/fea/data_plane/managers',
    '$BUILDDIR/fea/data_plane/fibconfig',
    '$BUILDDIR/fea/data_plane/ifconfig',
    '$BUILDDIR/fea/data_plane/io',
    '$BUILDDIR/fea/data_plane/control_socket',
    '$BUILDDIR/fea/data_plane/firewall',
    '$BUILDDIR/fea',
    '.'
    ])

env.AppendUnique(LIBS = [
        'xorp_fea_data_plane_managers',
        'xorp_fea_fibconfig',
        'xorp_fea_io',
        'xorp_fea_control_socket',
        'xorp_fea_ifconfig',
        'xif_fea_fib_client',
        'xif_fea_rawlink_client',
        'xif_fea_rawpkt4_client',
        'xif_socket4_user',
        'xif_finder_event_notifier',
        'xif_fea_stitch',
        'xorp_tecla',
        'xorp_cli',
        'xif_cli_processor',
        'xorp_fea_client',
        'xif_finder_event_notifier',
        'xst_fea_stitch',
        'xif_fea_stitch_register',
        'xif_fea_ifmgr_mirror',   # XXX?
        'xif_fea_ifmgr_replicator', # XXX?
        'xst_fea_ifmgr_mirror', # XXX?
        'xif_cli_manager',
        'xif_mfea_client',
        'xst_cli',
        'xst_fea',
        'xst_mfea',
        'xorp_mrt',
        'xorp_policy_backend',
        'xorp_policy_common',
        'xorp_ipc',
        'xorp_core',
        'xorp_proto',
        'xorp_comm',
        'xif_socket6_user',
        'xif_fea_rawpkt6_client',
        'xorp_fea_firewall',
        'xif_profile_client',
        'xorp_fea',
    ])

if not is_shared:
    env.AppendUnique(LIBS = [
        "crypto",
        ])

    if not (env.has_key('mingw') and env['mingw']):
        env.AppendUnique(LIBS = [
            "rt",
            ])

if (env.has_key('mingw') and env['mingw']):
    env.AppendUnique(LIBS = [
        'ws2_32',
        'iphlpapi',
#        'mprapi',
        'regex',
        'winmm',
        ])

    env.Append(LIBS = ['xorp_core'])

env.Replace(RPATH = [
    env.Literal(env['xorp_module_rpath'])
])

libxorp_fea_stitch_srcs = [
    'xrl_fea_stitch_node.cc',
    'fea_stitch_node.cc'
    ]

xorp_fea_stitch_srcs = [
    'fea_stitch_node.cc',
    'xrl_fea_stitch_node.cc',
    'xorp_fea_stitch.cc'
    ]

if is_shared:
    libxorp_fea_stitch = env.SharedLibrary(
	target = 'libxorp_fea_stitch',
	source = libxorp_fea_stitch_srcs,
	LIBS = '')
    if env['rtld_origin']:
        for obj in libxorp_fea_stitch:
            env.AddPostAction(libxorp_fea_stitch,
                env.Symlink(obj.abspath,
                            os.path.join(env['xorp_alias_libdir'], str(obj))))
else:
    libxorp_fea_stitch = env.StaticLibrary(
	target = 'libxorp_fea_stitch',
	source = libxorp_fea_stitch_srcs,
	LIBS = '')

xorp_fea_stitch = env.Program(target = 'xorp_fea_stitch',
				 source = xorp_fea_stitch_srcs)
if env['enable_builddirrun']:
    for obj in xorp_fea_stitch:
        env.AddPostAction(xorp_fea_stitch,
            env.Symlink(obj.abspath,
                os.path.join(env['xorp_alias_moduledir'], str(obj))))
env.Alias('install', env.InstallProgram(env['xorp_moduledir'], xorp_fea_stitch))

if is_shared:
    env.Alias('install',
              env.InstallLibrary(env['xorp_libdir'], libxorp_fea_stitch))

Default(xorp_fea_stitch)
