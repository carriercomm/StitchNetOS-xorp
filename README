        StitchNetOS: Stitch Network Operating System


  StitchNetOS is a distributed network operating system, that has a centralized
  control-plane and a distributed data-plane. The control-plane is based on the
  XORP routing platform. Currently, the data-plane is the linux kernel. Going
  forward we plan to use the click-modular router along with DPDK as our
  data-plane. 


  DESIGN OVERVIEW
  ==============================================================================
  StitchNetOS is designed specfically to run on x86 VMs. The goal of
  StitchNetOS is to replace existing properitary hardware that runs edge
  network services such as application firewalls, IDS, VPN concentrators,
  network analytics and load-balancers with software-based virtualized x86
  appliances, running on commodity x86 hardware.
  
  StitchNetOS is an ``elastic" network operating system that can provide
  vertical scaling, in terms of the number of forwarding ports, by ``stitching"
  together different forwarding planes into a single chassis. In StitchNetOS
  there exists a centralized control-plane that keeps track of all the
  data-planes. The centralized control-plane ``stitches" the data-planes
  together by talking to each of the data-planes, learning the interfaces
  existing on each data-plane and then programming the appropriate FIB, bridge
  entries and firewall rules in the individual data-planes. The data-planes
  would use the tables downloaded from the control-plane to forward traffic
  either within a single data-plane or across data-planes. Each data-plane VM
  of StitchNetOS is expected to have at least three ports. The first port is
  used by the data-plane to maintain connectivity with the control-plane. The
  second port is an external port on which ingress and egress traffic will
  enter and exit StitchNetOS. The third port is an internal port, that connects
  a data-plane with other data-planes over a private L2 network. This L2
  network could be a VLAN, a VxLAN or an NVGRE based L2 overlay. 
  
  CONTROL-PLANE 
  =============================================================================
  The control and data-plane of StitchNetOS are expected to run on x86-based
  VMs. The control-plane is a modified version of XORP. The key modification to
  XORP is the introduction of a new FEA data-plane interface called stitch.
  This new data-plane interface allows the XORP FEA agent to talk to stitch
  data-planes. The FEA stitch interface makes XORP agnostic of the distributed
  nature of the underlying data-plane. It abstracts the physical interfaces,
  present on each of the data-planes, into logical interfaces that various XORP
  modules can understand. Further it also provides interfaces for programming
  various tables (bridge, fib, firewall) into the data-path modules.  


  DATA-PLANE
  =================================================================================
  As mentioned earlier, the data-plane of StitchNetOS is expected to run on an
  x86-based VM. Accordingly the data-plane in StitchNetOS is a soft-switch.
  There are two components to the data-plane. The first is called the ``stitch
  FEA" or ``stitch forwarding engine abstraction". The main functionality of
  the stitch FEA is to interact with the XORP FEA running in the control-plane
  and informing the XORP FEA about the physical interfaces existing in the
  data-plane module, and providing interfaces to XORP FEA to download FIB,
  bridge and firewall rules. 


  BUILDING STITCHNETOS
  =================================================================================
  StitchNetOS is pretty much built on top of XORP, so the build infrastructure
  is identical to that of XORP. The build infrasture uses Scons to build all the
  binaries. You can read more about Scons here: http://www.scons.org/
  * To build StitchNetOS in the same folder in which the source exits:
                From the top director run:
                scons enable_builddirrun=true
  * To install the built binaries at a specific folder:
                scons prefix=`pwd`/xorpfs install

                The above command will install all the binaries under
                `pwd`/xorpfs. You can change the prefix parameter to any folder
                where you want to install the binaries. 
                                                                                                        
  INSTALLING STITCHNETOS IN  VM
  ================================================================================
  StitchNetOS is in its nascent stages, so at present the control-plane and
  data-plane VMs share the same image. We just start different binaries on the
  control and data-plane VMs. Installing StitchNetOS is pretty straight foward. 
   * Tar and gzip the folder in which the StitchNetOS binaries were installed.
    For the example given above you would do tar -cvzf `pwd`/xorpfs, from the
    top-directory. 
   * Copy the gzipped file to the control and data-plane VM root home directory.
     NOTE: Currently we will be running the control and data-plane as root. This
     is a big security hole in StitchNetOS at this point. In the future we will
     move StitchNetOS operations to be restricted to a non-root user role to
     give better access control to StitchNetOS. 

    * Under the $HOME for root you shoudl un-gzip the copied file. 



  RUNNING STITCHNETOS
  ===============================================================================
  StitchNetOS is a distributed network OS, so at the very least we will need
  two VMs to run StitchNetOS. The control-plane VM and the data-plane VM. On the
  Ctonrol-plane VM we need at least two processes to be running the xorp_rtmgr
  process and the xorp_fea process. On the data-plane we need the
  xorp_fea_stitch process to be running.

  * Control-plane (CP) VM:
    For any XORP IPC communication to take place, we need to have a finder which
    will resolve XRL requests from any XORP IPC clients. Therefore the process
    that has to run on the CP VM is the router-manager.  To run xorp
    router-manager run the following command.
    * Set XORP_HOME to xorp installation directory. 'export XORP_HOME=<xorp home directory>'
    top-directory of the XORP installed file system. 

    * Set the XORP_FINDER_CLIENT_ADDRESS environment variable: 
        export XORP_FINDER_CLIENT_ADDRESS=<XRL communication IP>
       
       The XORP_FINDER_CLIENT_ADDRESS is the address on which all XRL ports will
       be opened by different XRL processes. These are IP address and ports on
       which the XRL processes listen to for handling XRL requests.

    * Run the following command as root.
    $XORP_HOME/sbin/xorp_rtrmgr -t $XORP_HOME/share/xorp/templates/  \
        -i <XRL communication ip address> \
        -n <subnet from which XRL connections are accepted>  \
        -m $XORP_HOME/lib/xorp/sbin/  \
        -b/etc/xorp/xorp.conf'

        To see all the options that xorp_rtrmgr support run $XORP_HOME/sbin/xorp_rtrmgr -h
        NOTE: The xorp.conf is essential for start xorp_rtrmgr and making it
        start the xorp FEA process which is what all the DP stitch FEA proceses
        will talk to.

    * To confirm that the XORP processes are running correctly, run the command:
        netstat -t | grep "LISTEN"

        You should see the finder (xorp_rtrmgr) listening on port 19999. Also
        you should find the xorp_fea processes listening on a bunch of ports >
        30000. NOTE: All the TCP servers should be listening on the IP address
        specified in the environment variable. XORP_FINDER_CLIENT_ADDRESS
    
